{"version":3,"sources":["views/FeatureIdentification/FeatureQuestion/FeatureQuestion.js"],"names":["FeatureQuestion","props","_this","Object","_home_hamza_Desktop_ml_annotation_front_end_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","this","_home_hamza_Desktop_ml_annotation_front_end_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","_home_hamza_Desktop_ml_annotation_front_end_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","call","optionSelected","item","key","event","i","state","imageQuestionArray","length","currentImage","id","j","questions","currentImageQuestion","answer","setState","isNextEnable","isDoneEnable","questionFinished","questionCounter","imageCounter","isAllQuestionAnswered","questionNext","imagePath","question","options","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","className","checkAllQuestionAnswered","style","color","alt","src","margin","iterateOptions","imageQuestionCompleted","_this2","map","type","name","onChange","e","btnReturn","disabled","onClick","Component"],"mappings":"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","file":"static/js/54.fd126014.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\n\nimport \"./featureQuestion.css\";\n\nclass FeatureQuestion extends Component {\n    constructor(props) {\n        super(props);\n        // const {imageType} = this.props.match.params\n\n        this.state = {\n            imageQuestionArray : [\n                {\n                    id : 1,\n                    imagePath : `/assets/img/avatars/2.jpg`,\n                    questions : [\n                        {\n                            id : 1,\n                            question : 'question 1?',\n                            answer   : '',\n                            options  : ['options1-1-1','options2-1-1','option3-1-1','option4-1-1']\n                        },\n                        {\n                            id : 2,\n                            question : 'question 2?',\n                            answer   : '',\n                            options  : ['options1-2-1','options2-2-1','option3-2-1','option4-2-1']\n                        }\n                    ]\n                },\n                {\n                    id : 2,\n                    imagePath : `/assets/img/avatars/3.jpg`,\n                    questions : [\n                        {\n                            id : 1,\n                            question : 'question 1?',\n                            answer   : '',\n                            options  : ['options1-1-2','options2-1-2','option3-1-2','option4-1-2']\n                        },\n                        {\n                            id : 2,\n                            question : 'question 2?',\n                            answer   : '',\n                            options  : ['options1-2-2','options2-2-2','option3-2-2','option4-2-2']\n                        }\n                    ]\n                }\n            ],\n            currentImage : {},\n            currentImageQuestion : {},\n            isNextEnable : false,\n            isDoneEnable : false,\n            imageCounter : 1,\n            questionCounter : 1,\n            isAllQuestionAnswered : false\n        }\n        this.state.currentImage = this.state.imageQuestionArray[0];\n        this.state.currentImageQuestion = this.state.currentImage.questions[0];\n    }\n\n    render() {\n        return (\n        <div className=\"animated fadeIn container container\">\n            <div className=\"container\">\n                <div className=\"row mb-3\">\n                    <div className=\"col d-flex justify-content-center image-counter\">\n                        {this.state.imageCounter} / {this.state.imageQuestionArray.length }\n                    </div>\n                </div>\n                {this.checkAllQuestionAnswered()}\n            </div>\n        </div>\n        );\n    }\n\n    /**\n        @method : checkAllQuestionAnswered\n        @description : check wether all questions are answered or not! based on condition\n    */\n    checkAllQuestionAnswered () {\n        if (!this.state.isAllQuestionAnswered) {\n            return (\n                <div className=\"row\">\n                    <div className=\"col\">\n                        <img className=\"image questionImage\" alt=\"questionImage\" src={this.state.currentImage.imagePath}></img>\n                    </div>\n                    <div className=\"col justify-content-center align-self-center\">\n                        <h3 style={{color : \"#20a8d8\", margin: \"25px 0px\"}}>Q{this.state.questionCounter}/{this.state.currentImage.questions.length} : {this.state.currentImageQuestion.question}</h3>\n                        {this.iterateOptions()}\n                        <div className=\"row d-flex flex-row-reverse\">\n                            {this.imageQuestionCompleted()}\n                        </div>\n                    </div>\n                </div>\n            )\n        } else \n            return (\n                <div className=\"row\">\n                    <div className=\"col d-flex justify-content-center\">\n                        <h3 style={{color: \"#89daf3\"}}>\n                            Congratulation You have answered all question successfully!\n                        </h3>\n                    </div>\n                </div>\n            )\n    }\n\n    /**\n        @method : iterateOptions\n        @description : iterate options of a specific question\n    */\n    iterateOptions() {\n        return (\n            <div className=\"my-2 d-flex justify-content-center question-options\">\n                {this.state.currentImageQuestion.options.map((item, key) =>\n                    <label className=\"container\" key={item}>{item}\n                        <input type=\"radio\" name=\"radio\" onChange={(e) => this.optionSelected(item, key, e)} />\n                        <span className=\"checkmark\"></span>\n                    </label>\n                )}\n            </div>\n        )\n\n    }\n\n    /**\n        @method : imageQuestionCompleted\n        @description : wether done button should display or not after checking condition\n    */\n    imageQuestionCompleted() {\n        let btnReturn = null;\n        for (let i=0;i < this.state.imageQuestionArray.length; i++) {\n            if (this.state.currentImage.id === this.state.imageQuestionArray[i].id) {\n                if (this.state.currentImageQuestion.id === this.state.imageQuestionArray[i].questions[this.state.imageQuestionArray[i].questions.length-1].id) {\n                    btnReturn = <button className=\"btn btn-primary btn-md px-3 mx-2\" disabled={!this.state.isDoneEnable} onClick={this.questionFinished}>Next Image</button>\n                }\n            }\n        }\n\n        if (!btnReturn) \n            btnReturn = <button className=\"btn btn-md bg-primary px-3 mx-2\" disabled={!this.state.isNextEnable} onClick={this.questionNext}>Next Question</button>\n\n        return (btnReturn)\n    }\n\n    /**\n        @method : optionSelected\n        @description : onchange on answer selected\n    */\n    optionSelected = (item, key, event) => {\n        for (let i=0;i < this.state.imageQuestionArray.length; i++) {\n            if (this.state.currentImage.id === this.state.imageQuestionArray[i].id) {\n                for (let j = 0; j < this.state.imageQuestionArray[i].questions.length; j++) {\n                    if (this.state.currentImageQuestion.id === this.state.imageQuestionArray[i].questions[j].id) {\n                        this.state.imageQuestionArray[i].questions[j].answer = item;\n                        this.setState({isNextEnable : true})\n                        if (this.state.currentImageQuestion.id === this.state.imageQuestionArray[i].questions[this.state.imageQuestionArray[i].questions.length-1].id) \n                        this.setState({isDoneEnable : true})\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n        @method : questionFinished\n        @description : question Finished by clicking on next image btn, render new image with new\n        set of questions\n    */\n    questionFinished = () => {\n        for (let i=0;i < this.state.imageQuestionArray.length; i++) {\n            if (this.state.currentImage.id === this.state.imageQuestionArray[i].id && i != this.state.imageQuestionArray.length-1 ) {\n                this.setState({\n                    currentImage : this.state.imageQuestionArray[i+1],\n                    currentImageQuestion : this.state.imageQuestionArray[i+1].questions[0],\n                    isDoneEnable : false, \n                    isNextEnable : true,\n                    questionCounter : 1,\n                    imageCounter : this.state.imageCounter + 1\n                })\n            }\n        }\n        \n        if (this.state.currentImage.id === this.state.imageQuestionArray[this.state.imageQuestionArray.length-1].id && \n            this.state.currentImageQuestion.id === this.state.imageQuestionArray[this.state.imageQuestionArray.length-1].questions[this.state.imageQuestionArray[this.state.imageQuestionArray.length-1].questions.length-1].id) {\n            this.setState({\n                isAllQuestionAnswered : true\n            })\n        }\n    }\n\n    /**\n        @method : questionFinished\n        @description : render next question related to current image\n    */\n    questionNext = () => {\n        for (let i=0;i < this.state.imageQuestionArray.length; i++) {\n            if (this.state.currentImage.id === this.state.imageQuestionArray[i].id) {\n                for (let j = 0; j < this.state.imageQuestionArray[i].questions.length; j++) {\n                    if (this.state.currentImageQuestion.id === this.state.imageQuestionArray[i].questions[j].id && j != this.state.imageQuestionArray[i].questions.length-1 ) {\n                        this.setState({\n                            currentImageQuestion : this.state.imageQuestionArray[i].questions[j+1],\n                            questionCounter : this.state.questionCounter + 1\n                        })\n                    }\n                }\n            }\n        }\n    }\n}\n\nexport default FeatureQuestion;\n"],"sourceRoot":""}